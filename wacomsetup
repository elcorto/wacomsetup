#!/usr/bin/env python3

"""
About
-----

* Map Wacom tablet to primary screen (xrandr | grep primary, xsetwacom ...
  MapToOutput ...)
* scale Wacom active area to screen aspect ratio


Requirements
------------

* xsetwacom (Debian: xserver-xorg-input-wacom)
* Python3


X11 frame geo
-------------

We assume W1xH1+W0+H0 (example 3840x2160+0+0) with +w0+h0 = +0+0, where + means
upper left (w0, h0).

(w0, h0)
(0,  0)     w
     +--------------+
     |              |
     |              | h
     |              |
     +--------------+
                    (w1, h1)
                    (3840, 2160)

There is also the syntax -w0-h0 which means w1 and h1 are relative to lower
right (w0,h0).

We usually have this setup (from xrandr)

  DP1-1 connected primary 3840x2160+0+0 (normal left inverted right x axis y axis) 600mm x 340mm
  eDP1 connected 1920x1080+3840+0 (normal left inverted right x axis y axis) 310mm x 170mm

or

  DP-1-1 connected primary 3840x2160+0+0 (normal left inverted right x axis y axis) 600mm x 340mm
  eDP-1 connected (normal left inverted right x axis y axis)

which is a 4K screen (DP1-1) left of a 1080p laptop (eDP1):

  DP1-1 eDP1

i.e.

  xrandr --output eDP1 --mode 1920x1080 --pos 3840x0 --rotate normal
         --output DP1-1 --primary --mode 3840x2160 --pos 0x0 --rotate normal

which is set by arandr. Not tested if --right-of creates the same geo
1920x1080+3840+0 as --pos 3840x0 does.

We ignore w0,h0 != 0,0 which is the case in multi monitor setups as just shown
(1920x1080+3840+0 instead of 1920x1080+0+0). This is irrelevant for aspect
correction, since we use MapToOutput to map the stylus area to a screen instead
of using absolute coordinates. Should work in any kind of monitor setup
(untested).


Scaling mode
------------

Currently we only support stylus area aspect ratio (e.g. 16/10 = 1.6) <= screen
aspect ratio (e.g. 16/9 = 1.777...). In this case we scale the stylus active
area by removing some pixels at the bottom of the active area where we don't
draw often anyway:

+--------------+       +--------------+
| 16/10 = 1.6  |  -->  | 16/9 = 1.777 |
| stylus orig  |       | stylus new   |
| area         |       +--------------+
+--------------+

In the other case, we'd need to keep the height but remove a strip of pixels
from the left and/or right of the active area. This can be easily added but we
don't have that use case. For now we throw an exception in that case. PRs
welcome!

+--------------+
| 16/10 = 1.6  |
|              |
|              |
+--------------+

      |
      |
      v

 +----------+
 | 4/3      |
 | = 1.333  |
 |          |
 +----------+


Wacom frame geo
---------------

w0 h0 w1 h1

example:

$ xsetwacom get "Wacom Intuos Pro S Pen stylus" Area
0 0 31920 19950


Buttons (Intuos Pro S, 2020 model)
----------------------------------

https://askubuntu.com/a/660063
https://wiki.archlinux.org/index.php/Wacom_tablet#Remapping_buttons

From
    /usr/share/libwacom/intuos-pro-s.tablet
    /usr/share/libwacom/layouts/intuos-pro-s.svg

we find

2 B
3 C
4 D
1 A (buttom middle wheel)
5 E
6 F
7 G

but that's wrong. On our device B=1,C=2,... . Bummer.
"""

import subprocess
import re
import sys


def system(cmd):
    return subprocess.run(cmd, shell=True, capture_output=True, check=True)


def backtick(cmd):
    return system(cmd).stdout.decode().strip()


class Frame:
    def __init__(self, w0, h0, w1, h1):
        # upper left if +w0+h0
        self.w0 = w0
        self.h0 = h0
        # lower right
        self.w1 = w1
        self.h1 = h1
        self.dims = [self.w0, self.h0, self.w1, self.h1]
        for xx in self.dims:
            assert isinstance(xx, int), f"value {xx} of dims not int"

    @property
    def aspect(self):
        return (self.w1 - self.w0) / (self.h1 - self.h0)

    @property
    def wacom(self):
        return f"{self.w0} {self.h0} {self.w1} {self.h1}"

    @property
    def x11(self):
        return f"{self.w1}x{self.h1}+{self.w0}+{self.h0}"

    def __repr__(self):
        return f"{self.wacom} | aspect={self.aspect:.4g}"

    def __eq__(self, other):
        return self.dims == other.dims


def get_stylus_frame(devs):
    cmd = f"xsetwacom get '{devs['stylus']}' Area"
    return Frame(*map(int, backtick(cmd).split()))


if __name__ == "__main__":
    # $ xsetwacom list devices
    # Wacom Intuos Pro S Pen stylus           id: 9   type: STYLUS
    # Wacom Intuos Pro S Pen eraser           id: 10  type: ERASER
    # Wacom Intuos Pro S Pen cursor           id: 11  type: CURSOR
    # Wacom Intuos Pro S Pad pad              id: 21  type: PAD
    # Wacom Intuos Pro S Finger touch         id: 22  type: TOUCH
    devs_rex = re.compile(r"(^Wacom.+?)\s+id:.+type:\s+([a-zA-Z]+)\s*$", re.M)
    devs = {
        tup[1].lower(): tup[0]
        for tup in devs_rex.findall(backtick("xsetwacom list devices"))
    }

    if len(devs) == 0:
        print("no devices found")
        sys.exit(0)

    # xrandr: select primary screen, there can be only one .. right? :)
    screen_rex = re.compile(
        r"^((DP|HDMI|eDP)[0-9]*(-[0-9]+)*).*\s+connected primary.*?([0-9]+x[0-9]+)\+[0-9]+\+[0-9]+.+$",
        re.M,
    )
    # [('DP1-1', 'DP', '-1', '3840x2160')]
    matches = screen_rex.findall(backtick("xrandr"))
    assert len(matches) > 0, "no primary screen found, xrandr regex wrong?"
    assert len(matches) == 1, "found multiple primary screens, xrandr regex wrong?"
    screen_name = matches[0][0]
    # w0,h0=0,0 is an assumption, ignore actual position
    screen_frame = Frame(0, 0, *map(int, matches[0][-1].split("x")))

    print(f"map to screen: {screen_name}")
    system(f"xsetwacom set '{devs['stylus']}' MapToOutput {screen_name}")

    # need that before any readout of stylus info
    system(f"xsetwacom set '{devs['stylus']}' ResetArea")

    print(f"screen: {screen_frame}")
    stylus_frame = get_stylus_frame(devs)

    assert stylus_frame.aspect <= screen_frame.aspect, (
        f"stylus aspect ({stylus_frame.aspect}) > screen aspect "
        f"({screen_frame.aspect}) not supported"
    )

    stylus_frame_new = Frame(
        stylus_frame.w0,
        stylus_frame.h0,
        stylus_frame.w1,
        int(stylus_frame.w1 / screen_frame.aspect),
    )
    print(f"stylus: {stylus_frame} -> {stylus_frame_new}")
    system(f"xsetwacom set '{devs['stylus']}' Area {stylus_frame_new.wacom}")
    assert stylus_frame_new == get_stylus_frame(devs)

    # decrease drawing lag by less smoothing (moving avg window size)
    system(f"xsetwacom set '{devs['stylus']}' RawSample 2")

    # works for our Intuos Pro S (2020 model)
    #
    # top left button: Escape
    system(f"xsetwacom set '{devs['pad']}' Button 1 key 'esc'")
    # second from top left, middle of first 3 buttons: CTRL-Z (useful for undo
    # operations in drawing apps); see xsetwacom(1) or the arch linux wiki for
    # that syntax
    system(f"xsetwacom set '{devs['pad']}' Button 2 key '+ctrl z -ctrl'")
