#!/usr/bin/env python3

import subprocess
import re
import sys


def system(cmd):
    return subprocess.run(cmd, shell=True, capture_output=True, check=True)


def backtick(cmd):
    return system(cmd).stdout.decode().strip()


class Frame:
    def __init__(self, w0, h0, w1, h1):
        # upper left if +w0+h0
        self.w0 = w0
        self.h0 = h0
        # lower right
        self.w1 = w1
        self.h1 = h1
        self.dims = [self.w0, self.h0, self.w1, self.h1]
        for xx in self.dims:
            assert isinstance(xx, int), f"value {xx} of dims not int"

    @property
    def aspect(self):
        return (self.w1 - self.w0) / (self.h1 - self.h0)

    @property
    def wacom(self):
        return f"{self.w0} {self.h0} {self.w1} {self.h1}"

    @property
    def x11(self):
        return f"{self.w1}x{self.h1}+{self.w0}+{self.h0}"

    def __repr__(self):
        return f"{self.wacom} | aspect={self.aspect:.4g}"

    def __eq__(self, other):
        return self.dims == other.dims


def get_stylus_frame(devs):
    cmd = f"xsetwacom get '{devs['stylus']}' Area"
    return Frame(*map(int, backtick(cmd).split()))


if __name__ == "__main__":
    # $ xsetwacom list devices
    # Wacom Intuos Pro S Pen stylus           id: 9   type: STYLUS
    # Wacom Intuos Pro S Pen eraser           id: 10  type: ERASER
    # Wacom Intuos Pro S Pen cursor           id: 11  type: CURSOR
    # Wacom Intuos Pro S Pad pad              id: 21  type: PAD
    # Wacom Intuos Pro S Finger touch         id: 22  type: TOUCH
    devs_rex = re.compile(r"(^Wacom.+?)\s+id:.+type:\s+([a-zA-Z]+)\s*$", re.M)
    devs = {
        tup[1].lower(): tup[0]
        for tup in devs_rex.findall(backtick("xsetwacom list devices"))
    }

    if len(devs) == 0:
        print("no devices found")
        sys.exit(0)

    # xrandr: select primary screen, there can be only one .. right? :)
    screen_rex = re.compile(
        r"^((DP|HDMI|eDP)[0-9]*(-[0-9]+)*).*\s+connected primary.*?([0-9]+x[0-9]+)\+[0-9]+\+[0-9]+.+$",
        re.M,
    )
    # [('DP1-1', 'DP', '-1', '3840x2160')]
    matches = screen_rex.findall(backtick("xrandr"))
    assert len(matches) > 0, "no primary screen found, xrandr regex wrong?"
    assert len(matches) == 1, "found multiple primary screens, xrandr regex wrong?"
    screen_name = matches[0][0]
    # w0,h0=0,0 is an assumption, ignore actual position
    screen_frame = Frame(0, 0, *map(int, matches[0][-1].split("x")))

    print(f"map to screen: {screen_name}")
    system(f"xsetwacom set '{devs['stylus']}' MapToOutput {screen_name}")

    # need that before any readout of stylus info
    system(f"xsetwacom set '{devs['stylus']}' ResetArea")

    print(f"screen: {screen_frame}")
    stylus_frame = get_stylus_frame(devs)

    assert stylus_frame.aspect <= screen_frame.aspect, (
        f"stylus aspect ({stylus_frame.aspect}) > screen aspect "
        f"({screen_frame.aspect}) not supported"
    )

    stylus_frame_new = Frame(
        stylus_frame.w0,
        stylus_frame.h0,
        stylus_frame.w1,
        int(stylus_frame.w1 / screen_frame.aspect),
    )
    print(f"stylus: {stylus_frame} -> {stylus_frame_new}")
    system(f"xsetwacom set '{devs['stylus']}' Area {stylus_frame_new.wacom}")
    assert stylus_frame_new == get_stylus_frame(devs)

    # decrease drawing lag by less smoothing (moving avg window size)
    system(f"xsetwacom set '{devs['stylus']}' RawSample 2")

    # works for our Intuos Pro S (2020 model)
    #
    # top left button: Escape
    system(f"xsetwacom set '{devs['pad']}' Button 1 key 'esc'")
    # second from top left, middle of first 3 buttons: CTRL-Z (useful for undo
    # operations in drawing apps); see xsetwacom(1) or the arch linux wiki for
    # that syntax
    system(f"xsetwacom set '{devs['pad']}' Button 2 key '+ctrl z -ctrl'")
